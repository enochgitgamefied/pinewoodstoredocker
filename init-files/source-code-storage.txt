<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Admin Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; }
        pre { background: #f4f4f4; padding: 10px; border-radius: 5px; }
        .dashboard { margin: 20px; }
        textarea { width: 100%; height: 100px; margin-bottom: 10px; }
        button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="dashboard">
        <h1>Admin Dashboard</h1>

        <!-- Input field and Update button -->
        <h2>Update Source Code</h2>
        <textarea id="sourceCodeInput" placeholder="Paste your source code here..."></textarea>
        <button onclick="updateSourceCode()">Update</button>

        <!-- Display the source code -->
        <h2>Source Code</h2>
        <pre><code id="sourceCodeDisplay" th:text="${sourceCode}"></code></pre>

        <!-- Other information -->
        <h2>Other Information</h2>
        <p>Status: Online</p>
        <p>Total Users: <span th:text="${totalUsers}"></span></p>
        <p>Pending Orders: <span th:text="${pendingOrders}"></span></p>
        <p>System Alerts: <span th:text="${systemAlerts}"></span></p>
        <p>Active Sessions: <span th:text="${activeSessions}"></span></p>
        <p>API Requests Today: <span th:text="${apiRequestsToday}"></span></p>
        <p>Revenue Today: $<span th:text="${revenueToday}"></span></p>
        <p>Monthly Revenue: $<span th:text="${monthlyRevenue}"></span></p>

        <h3>Recent Activities:</h3>
        <ul>
            <li>User 'john_doe' updated product details.</li>
            <li>Admin 'admin123' modified site settings.</li>
            <li>System maintenance scheduled for Sunday.</li>
        </ul>
    </div>

    <!-- JavaScript to handle the update -->
    <script>
        function updateSourceCode() {
            // Get the input value
            const input = document.getElementById('sourceCodeInput').value;

            // Update the displayed source code
            document.getElementById('sourceCodeDisplay').textContent = input;

            // Send the updated source code to the server
            fetch('/admin/update-source-code', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ sourceCode: input }),
            })
            .then(response => response.json())
            .then(data => {
                console.log('Source code updated successfully:', data);
            })
            .catch(error => {
                console.error('Error updating source code:', error);
            });
        }
    </script>
</body>
</html>

=== Update by admin at 2025-03-18 18:45:38 ===
spring.application.name=auth2
server.port=8088
# MySQL Configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/auth2
spring.datasource.url=jdbc:mysql://localhost:3307/auth2
spring.datasource.username=root
spring.datasource.password=12345
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Spring Security Configuration (Optional for basic user authentication)
spring.security.user.name=admin
spring.security.user.password=12345

#To Demo XSS
server.servlet.session.cookie.http-only=false
#GraphQL
spring.graphql.endpoint=/graphql
spring.graphql.servlet.mapping=/graphql
spring.graphql.schema-location-pattern=classpath:graphql/*.graphqls


file.base.directory=C:/data/products/

# Enable DEBUG logging for Spring Security
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.web=DEBUG
logging.level.org.springframework.security.authentication=DEBUG

#Disable Spring Security for Testing

#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# Disable Tomcat protection for Testing


log4j.logger.org.apache.xerces=DEBUG, console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n



# application.properties
#api.base.url=http://192.168.1.162:8088
api.base.url=http://localhost:8088

# Upload Direcoty
file.upload-dir=C:/Storage

# jar location for RFI demo
rfi.jar.location=C:/JARs/


# Path to the source code storage file
storage.file.path=C:/temp/source-code-storage.txt

# Path to the source code storage file for Linux
#storage.file.path=/tmp/source-code-storage.txt

=== Update by admin at 2025-03-18 18:47:59 ===
spring.application.name=auth2
server.port=8088
# MySQL Configuration
#spring.datasource.url=jdbc:mysql://localhost:3306/auth2
spring.datasource.url=jdbc:mysql://localhost:3307/auth2
spring.datasource.username=root
spring.datasource.password=12345
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Spring Security Configuration (Optional for basic user authentication)
spring.security.user.name=admin
spring.security.user.password=12345

#To Demo XSS
server.servlet.session.cookie.http-only=false
#GraphQL
spring.graphql.endpoint=/graphql
spring.graphql.servlet.mapping=/graphql
spring.graphql.schema-location-pattern=classpath:graphql/*.graphqls


file.base.directory=C:/data/products/

# Enable DEBUG logging for Spring Security
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.web=DEBUG
logging.level.org.springframework.security.authentication=DEBUG

#Disable Spring Security for Testing

#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# Disable Tomcat protection for Testing


log4j.logger.org.apache.xerces=DEBUG, console
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c{1}:%L - %m%n



# application.properties
#api.base.url=http://192.168.1.162:8088
api.base.url=http://localhost:8088

# Upload Direcoty
file.upload-dir=C:/Storage

# jar location for RFI demo
rfi.jar.location=C:/JARs/


# Path to the source code storage file
storage.file.path=C:/temp/source-code-storage.txt

# Path to the source code storage file for Linux
#storage.file.path=/tmp/source-code-storage.txt

=== Update by admin at 2025-03-18 18:58:41 ===
package com.enoch.auth2.controller;

import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpSession;


@RestController
@RequestMapping("/chat")
@CrossOrigin(origins = {"http://localhost:3000", "http://192.168.1.80:3000"})
public class ChatController {

    @GetMapping("/sendMessage")
    public String sendMessage(@RequestParam("message") String message, HttpSession session) {
        // Store the user message in the session
        session.setAttribute("userMessage", message); 
        
        // This will create a session cookie automatically if one doesn't exist
        // and store the user message in the session.

        // For demonstration, we return the message along with a confirmation
        return "You said: " + message + ". Your message is now stored in session.";
    }

    @GetMapping("/getMessage")
    public String getMessage(HttpSession session) {
        // Retrieve the message from the session
        String storedMessage = (String) session.getAttribute("userMessage");
        
        if (storedMessage != null) {
            return "Stored message: " + storedMessage;
        } else {
            return "No message stored in session.";
        }
    }
}



=== Update by admin at 2025-03-18 19:11:06 ===
package com.enoch.auth2.controller;

import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/info")
public class SpellController {
	
	@GetMapping("/security")
    public String evaluate(@RequestParam String expression) {
    	System.out.println(expression);
        ExpressionParser parser = new SpelExpressionParser();
        Expression exp = parser.parseExpression(expression);
        return "Result: " + exp.getValue();
    }
    
	
}


/*

RCE command-http://localhost:8080/spel/evaluate?expression=T(java.lang.Runtime).getRuntime().exec('calc')





*/

=== Update by admin at 2025-03-18 19:17:26 ===
package com.enoch.auth2.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletResponse;

@Controller
public class GiftCardController {
	
	
	@GetMapping("/getGiftCard")
	public String giftcard () {
		
		return "Giftcard";
	}
     
	 @GetMapping("/sendCard")
	    public String unsafeResponse(HttpServletResponse response, @RequestParam String data) {
	    	// Manually set CORS headers (for debugging)
	        response.setHeader("Access-Control-Allow-Origin", "http://localhost:3000");
	        response.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
	        response.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
	        response.setHeader("Access-Control-Allow-Credentials", "true");
	        // Vulnerable: Directly injecting user input into HTTP response headers
	    	System.out.println(data);
	    	response.setHeader("Location", "/profile?data=" + data);
	        return "index";
	    }
}


=== Update by admin at 2025-03-18 19:18:26 ===
package com.enoch.auth2.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletResponse;

@Controller
public class GiftCardController {
	
	
	@GetMapping("/getGiftCard")
	public String giftcard () {
		
		return "Giftcard";
	}
     
	 @GetMapping("/sendCard")
	    public String unsafeResponse(HttpServletResponse response, @RequestParam String data) {
	    	// Manually set CORS headers (for debugging)
	        response.setHeader("Access-Control-Allow-Origin", "http://localhost:3000");
	        response.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
	        response.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
	        response.setHeader("Access-Control-Allow-Credentials", "true");
	        // Vulnerable: Directly injecting user input into HTTP response headers
	    	System.out.println(data);
	    	response.setHeader("Location", "/profile?data=" + data);
	        return "index";
	    }
}


=== Update by admin at 2025-03-18 19:19:56 ===
package com.enoch.auth2.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import com.enoch.auth2.model.Comment;
import com.enoch.auth2.repository.CommentRepository;

import java.util.List;

@Controller
@RequestMapping("/comments")
public class CommentController {

    @Autowired
    private CommentRepository commentRepository;

    @GetMapping
    public String getComments(Model model) {
        List<Comment> comments = commentRepository.findAll();
        model.addAttribute("comments", comments);
        return "comments";
    }

    @PostMapping("/add")
    public String addComment(@RequestParam String name, @RequestParam String email, @RequestParam String comment) {
        Comment newComment = new Comment(name, email, comment);
        commentRepository.save(newComment);
        return "redirect:/comments";
    }
}


=== Update by admin at 2025-03-18 19:24:00 ===
####################################
TESTING DASHBOARD
####################################

=== Update by admin at 2025-03-18 19:28:19 ===
###############################################################
The Server would be down for Maintenance on 3/21/2025 1AM EST-11AM EST
###############################################################

=== Update by admin at 2025-03-18 19:43:49 ===
$$$$$$$$$$$$$$$$$$$$$$$
THIS IS TEST
$$$$$$$$$$$$$$$$$$$$$$$